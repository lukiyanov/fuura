#pragma once
#include <list>
#include <ostream>
//#include "RegisterPlaceholder.h"
#include "ProcessorTypes.h"

namespace fuura::compilation
{
	class AsmTranslator;

	///////////////////////////////////////////////////////////////////////////
	//
	//	ѕосле подстановки регистров генерирует одну (реже - несколько или ни одной)
	//	ассемблерных команд.
	//
	///////////////////////////////////////////////////////////////////////////
	class IAsmInstruction
	{
	public:
		/*
		using TempValues = std::list<IRegisterPlaceholder*>;

		// --------------------------------------------------------------------
		virtual ~IAsmInstruction() = default;

		// --------------------------------------------------------------------
		// ...
		// --------------------------------------------------------------------
		// virtual void GenerateCode(AsmTranslator& compiler);

		// --------------------------------------------------------------------
		virtual TempValues GetArguments() const = 0;

		// --------------------------------------------------------------------
		// ¬озвращает виртуальный регистр в котором содержитс€ результат выполнени€ команды.
		virtual IRegisterPlaceholder* GetResult() const = 0;

		// --------------------------------------------------------------------
		// ¬озвращает им€ команды, например mov, add, и т.д.
		// »спользуетс€ дл€ отладочного вывода.
		// --------------------------------------------------------------------
		virtual std::string GetName() const = 0;

		// --------------------------------------------------------------------
		//	»спользуетс€ в отладочных цел€х.
		// --------------------------------------------------------------------
		operator std::string();
		*/
	};

	///////////////////////////////////////////////////////////////////////////
	//std::ostream& operator << (std::ostream& out, const IAsmInstruction& dep);

	///////////////////////////////////////////////////////////////////////////
}