#pragma once
#include <vector>
#include "ProcessorTypes.h"

namespace fuura::compilation
{
	//////////////////////////////////////////////////////////////////////////////
	//
	//	Контейнер для машинного кода.
	//
	//////////////////////////////////////////////////////////////////////////////
	class MachineCodeContainer
	{
		std::vector<byte> m_currentCode;

	public:
		// Важно:
		//		среди команд добавления нет добавляющей int, т.к. получение int
		//		часто является признаком ошибки, например byte | byte даёт int.

		// ----------------------------------------------------------------------------
		// Добавляет байт.
		// ----------------------------------------------------------------------------
		inline MachineCodeContainer& operator << (byte b)
		{
			m_currentCode.push_back(b);
			return *this;
		}

		// ----------------------------------------------------------------------------
		// Добавляет char как байт.
		// ----------------------------------------------------------------------------
		inline MachineCodeContainer& operator << (char b)
		{
			return (*this) << (byte)b;
		}

		// ----------------------------------------------------------------------------
		// Добавляет константу типа dword в обратном порядке следования байтов.
		// ----------------------------------------------------------------------------
		inline MachineCodeContainer& operator << (dword constant)
		{
			m_currentCode.push_back(GetByte<3>(constant));
			m_currentCode.push_back(GetByte<2>(constant));
			m_currentCode.push_back(GetByte<1>(constant));
			m_currentCode.push_back(GetByte<0>(constant));

			return *this;
		}

		// ----------------------------------------------------------------------------
		// Добавляет константу типа int32 в обратном порядке следования байтов.
		// ----------------------------------------------------------------------------
		inline MachineCodeContainer& operator << (int32 constant)
		{
			return (*this) << (dword)constant;
		}

		// ----------------------------------------------------------------------------
		// Добавляет константу типа word в обратном порядке следования байтов.
		// ----------------------------------------------------------------------------
		inline MachineCodeContainer& operator << (word constant)
		{
			m_currentCode.push_back(GetByte<1>(constant));
			m_currentCode.push_back(GetByte<0>(constant));

			return *this;
		}

		// ----------------------------------------------------------------------------
		// Добавляет константу типа int16 в обратном порядке следования байтов.
		// ----------------------------------------------------------------------------
		inline MachineCodeContainer& operator << (int16 constant)
		{
			return (*this) << (word)constant;
		}


	public:
		// ----------------------------------------------------------------------------
		// Возвращает текущий размер откомпилированного кода в байтах.
		// ----------------------------------------------------------------------------
		inline std::size_t GetCodeSize() const
		{
			return m_currentCode.size();
		}

		// ----------------------------------------------------------------------------
		// Возвращает указатель на начало блока кода.
		// Если контейнер пуст, генерирует исключение.
		// ----------------------------------------------------------------------------
		inline byte* GetCode()
		{
			return &(m_currentCode.at(0));
		}

		// ----------------------------------------------------------------------------
		// Очищает контейнер от кода.
		// ----------------------------------------------------------------------------
		inline void Clear()
		{
			m_currentCode.clear();
		}
	};

	//////////////////////////////////////////////////////////////////////////////
}