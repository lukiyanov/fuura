#pragma once
#include "OperationFactory.h"
#include "TypeCastFactory.h"
#include "FunctionRegistry.h"
#include "IArgumentSet.h"

namespace fuura::language
{
	///////////////////////////////////////////////////////////////////////////
	//
	//	Объединяет в себе настройки семантики языка.
	//	Причём как постоянных, таких как преобразования типов и набор операций,
	//	так и зависящих от конкретного алгоритма, таких как набор агрументов.
	//
	//	Семантическая составляющая языка устанавливается именно здесь.
	//
	///////////////////////////////////////////////////////////////////////////
	class FuuraSemantics
	{
	public:
		// --------------------------------------------------------------------
		// Настраивает семантическую составляющую языка.
		// --------------------------------------------------------------------
		FuuraSemantics();

		// --------------------------------------------------------------------
		// Устанавливет текущий набор аргументов, доступный для функции.
		// Должна быть обязательно вызвана перед началом разбора функции.
		// --------------------------------------------------------------------
		void UpdateArgumentSet(IArgumentSet* argumentSet);

		// --------------------------------------------------------------------
		// Возвращает набор аргументов, доступный для данной функции.
		// Используется при разборе этой функции.
		// --------------------------------------------------------------------
		IArgumentSet& GetArgumentSet();

		// --------------------------------------------------------------------
		// Возвращает фабрику операций языка, генерирующую конкретные
		// обработчики операции в зависимости от типов операндов.
		// Используется при разборе функции.
		// --------------------------------------------------------------------
		OperationFactory& GetOperationFactory();

		// --------------------------------------------------------------------
		// Возвращает фабрику неявных преобразований языка.
		// Используется при разборе функции.
		// --------------------------------------------------------------------
		TypeCastFactory& GetImplicitTypeCastFactory();

		// --------------------------------------------------------------------
		// Возвращает реестр функций, доступных для вызова из кода fuura.
		// Используется при разборе функции.
		// --------------------------------------------------------------------
		FunctionRegistry& GetFunctionRegistry();

	private:
		TypeCastFactory  m_typeCastFactory;
		OperationFactory m_operationFactory;
		FunctionRegistry m_functionRegistry;
		IArgumentSet*    m_argumentSet;	// Невладеющий
	};

	///////////////////////////////////////////////////////////////////////////
}