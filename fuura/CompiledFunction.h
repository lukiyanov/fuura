#pragma once
#include <memory>

namespace fuura::compilation
{
	template <typename ...FunctionSignature> class CompiledFunction;

	///////////////////////////////////////////////////////////////////////////
	//
	//	Откомпилированная функция, пригодная для выполнения.
	//	Хранит указатель на откомпилированный код и позволяет его выполнить.
	//
	///////////////////////////////////////////////////////////////////////////
	template <typename ResultType, typename ...Args>
	class CompiledFunction <ResultType(Args...)>
	{
		std::shared_ptr<void> m_compiledCode;

	public:
		// --------------------------------------------------------------------------
		CompiledFunction(std::shared_ptr<void> compiledCode)
			: m_compiledCode(compiledCode)
		{}

		// --------------------------------------------------------------------------
		// Производит выполнение откомпилированного кода как функции с указанными аргументами.
		// --------------------------------------------------------------------------
		ResultType operator () (Args... args)
		{
			// Ответственность за совместимость сигнатуры функции с шеллкодом - на генерирующем коде.
			auto func = reinterpret_cast<ResultType(*)(Args...)>(m_compiledCode.get());
			return func(args...);
		}

		// --------------------------------------------------------------------------
	};

	///////////////////////////////////////////////////////////////////////////
}