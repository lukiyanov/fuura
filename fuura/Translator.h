#pragma once
#include <string_view>
#include <memory>

#include "ArgumentNameList.h"
#include "Function.h"
#include "FuuraSemantics.h"

namespace fuura
{
	//////////////////////////////////////////////////////////////////////////////
	//
	//	Верхний класс всей библиотеки, транслятор языка fuura.
	//
	//////////////////////////////////////////////////////////////////////////////
	class Translator
	{
	public:
		// --------------------------------------------------------------------------
		Translator();

		// --------------------------------------------------------------------------
		//	Расширяет стандартный список доступных для кода функций.
		//	Регистрируемые функции не должны создавать конфликтов имён.
		// --------------------------------------------------------------------------
		void RegisterExternalFunctions(/*ExternFunctionTable&&*/)
		{
			// TODO
		}

		// --------------------------------------------------------------------------
		//	Возвращает готовый для выполнения функциональный объект, соответствующий переданнму коду.
		//	Возвращаемое значение Func, её количество аргументов и их тип должны точно
		//	соответствовать передаваемому коду, иначе операция не будет выполнена
		//	и функция сгенерирует соответствующее исключение.
		//	Параметры:
		//		argNames  -	имена аргументов функции в коде в том же порядке, в котором
		//					они перечислены в сигнатуре функции. Не могут повторяться.
		//					Не могут быть пустыми строками. Необязательно каждый из них
		//					должен быть использован в коде, но использование там аргументов,
		//					здесь не указанных, не допускается. Количество переданных имён
		//					аргументов должно точно совпадать с количеством аргументов Func.
		//					Например:
		//						MakeFunction<double(int, bool, double)>({"x", "y", "z"}, source)
		//							В этом случае x имеет тип int, y - bool, z - double.
		//		functionSource - код создаваемой функции на языке fuura.
		// --------------------------------------------------------------------------
		template <typename Func>
		Function<Func> MakeFunction(ArgumentNameList<tools::FunctionSignature<Func>::ArgCount> argNames, std::string_view functionSource)
		{
			Function<Func> alg { std::move(argNames), functionSource, *m_parser, m_fuuraSemantics };
			return alg;
		}

		// ---------------------------------------------------------------------------

	private:
		// Парсер, преобразует текст в дерево потомков ICalculatable.
		std::unique_ptr<IParser> m_parser;

		// Генератор неявных преобразований типов.
		language::FuuraSemantics m_fuuraSemantics;

		// Перечень доступных для использования в языке функций.
		// FunctionRegistry m_stdFunctions;	// Этому классу нужна функция Add.
	};
}